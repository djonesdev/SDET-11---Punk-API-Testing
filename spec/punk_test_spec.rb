

# Rspec tests on a randomly generated dataset from PunkAPI

describe 'Random punk tests' do

  before(:all) do
    service = PunkService.new
    @json = service.random_punk_call
  end

  it 'The id should be a type of integer' do
    expect(@json["id"]).to be_a_kind_of(Integer)
  end

  it 'should have an image url' do
    expect(@json['image_url'])
  end

  it 'boil volume should have two key value pairs' do
    expect(@json['boil_volume'].size).to eq(2)
  end

  it 'Should have three ingredients' do
    expect(@json['ingredients'].size).to eq(3)
  end

end

# Rspec tests on specific dataset generated by the ID params

describe 'Punk by ID tests' do

  before(:all) do
    service = PunkService.new
    @jsonid = service.id_punk_call(1)
  end

  it 'The id should be a type of integer' do
    expect(@jsonid["id"]).to be_a_kind_of(Integer)
  end

  it 'The name should be buzz' do
   expect(@jsonid['name']).to eq('Buzz')
  end

  it 'abv should have a float value of 4.5' do
    expect(@jsonid['abv']).to eq(4.5)
  end

end

  #Tests for the entirety of the API

describe 'All punk api' do

  before(:all) do
    service = PunkService.new
    @jsonall = service.all_punk_service
  end

  # tests the make sure all data types are correct accross all hashs

  it 'The id should be a type of integer' do
    @jsonall.each do |i|
      expect(i['name']).to be_a_kind_of(String)
    end
  end

  it "should have 21 keys" do
      @jsonall.each do |i|
        expect(i.size).to eq(21)
      end
  end
  #
  it 'description should be a string' do
    @jsonall.each do |i|
      expect(i['description']).to be_a_kind_of(String)
    end
  end
  #
  it 'abv should be a float' do
    @jsonall.each do |i|
      expect(i['abv']).to be_a_kind_of(Float).or be_a_kind_of(Integer).or be_a_kind_of(NilClass)
    end
  end
  #
  it 'Volume value should be a type of integer' do
    @jsonall.each do |i|
      expect(i['volume']['value']).to be_a_kind_of(Integer)
    end
  end
  #
  it 'fermentation unit should be a string' do
    @jsonall.each do |i|
      expect(i['method']['fermentation']['temp']['unit']).to be_a_kind_of(String)
    end
  end
  #
  it 'fermentation value should be an integer' do
    @jsonall.each do |i|
      expect(i['method']['fermentation']['temp']['value']).to be_a_kind_of(Integer)
    end
  end
  #
  it 'Twist should be a String or Null' do
    @jsonall.each do |i|
      expect(i['method']['twist']).to be_a_kind_of(NilClass).or be_a_kind_of(String)
    end
  end

end

# Tests based on the query string params in the URL

describe "Punk by query string" do

  before(:all) do
    service = PunkService.new
    @jsonquery = service.option_punk_call({"yeast" => "american", "abv_gt" => 4})
  end

  it 'The id should be a type of integer' do
    expect(@jsonquery["name"]).to be_a_kind_of(String)
  end

  it 'The value key inside the mash_temp array have a value of 69' do
    expect(@jsonquery['method']['mash_temp'][0]['temp']['value']).to eq(69)
  end

  it 'description should be a string' do
    expect(@jsonquery['description']).to be_a_kind_of(String)
  end


end
